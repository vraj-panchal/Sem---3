
Q-1



#include<iostream>
using namespace std;

class Vehicle
{
    protected: 

        string brand;
        string model;

    public:

        Vehicle()
        {}
        Vehicle(string b,string m)
        {
            brand=b;
            model=m;
        }

        void get_data()
        {
            cout<<"\n Enter Bike Brand : ";
            cin>>brand;

            cout<<"\n Enter Bike Model : ";
            cin>>model;
        }

        void Display()
        {
            cout << "\n Brand: " << brand << "\n Model: " << model << endl;
        }
};

class TwoWheeler : public Vehicle
{
    protected:

        float distance;
        float mileage;

    public:

        TwoWheeler()
        {}
        TwoWheeler(float d, float m)
        {
            
            distance=d;
            mileage=m;
        }
        void data()
        {
            get_data();

            cout<<"\n Enter Distance traveled (in KM): ";
            cin>>distance;

            cout << "Enter mileage (in km/l): ";
            cin >> mileage;
        }

        void Display()
        {
            Vehicle::Display();
            cout << "Distance: " << distance << " km, Mileage: " << mileage << " km/l" << endl;
    
        }
};

class Bike : public TwoWheeler
{
protected:

    string type;

public:


    Bike(){}
    Bike(string t)
    {
        type=t;
    }
   

    void Get()
    {
        
        data();
        cout << "Enter bike type (e.g., Sports, Cruiser): ";
        cin>>type;

    }
    
    void Display()
    {
        TwoWheeler::Display();
        
       
        cout << "Type: " << type << endl;
    }


};


int main()
{
    int size = 3;

    Bike b[size];

    for(int i=0 ;i<size;i++)
    {
        b[i].Get();
    }
    
    for(int i=0 ;i<size ; i++)
    {
        b[i].Display();
    }
    

    return 0;

   
}




Q-2






#include <iostream>
#include <string>
using namespace std;

// Base class for Patient
class Patient 
{
protected:
    string name;
    int age;

public:

    // Default constructor
    Patient(){}

    // Parameterized constructor
    Patient(string n, int a) 
    {
        name=n;
        age=a; 
    }
    void getPatientData() 
    {
        cout << "Enter Patient Name: ";
        cin >> name;
        cout << "Enter Patient Age: ";
        cin >> age;
    }

    void displayPatientData() 
    {
        cout << "Name: " << name << ", Age: " << age << endl;
    }
};

// Base class for IPD
class IPD 
{
protected:
    int ward_no;
    int bed_no;
    float charge_per_day;

public:


        // Default constructor
    IPD(){}

    // Parameterized constructor
    IPD(int w, int b, float c)
    {
        ward_no=w;
        bed_no=b;
        charge_per_day=c; 
    }

    void getIPDData() 
    {
        cout << "Enter Ward Number: ";
        cin >> ward_no;
        cout << "Enter Bed Number: ";
        cin >> bed_no;
        cout << "Enter Charge per Day: ";
        cin >> charge_per_day;
    }

    void displayIPDData() 
    {
        cout << "Ward No: " << ward_no << ", Bed No: " << bed_no << ", Charge per Day: " << charge_per_day << endl;
    }

};

// Derived class for IPD Patient
class IPDPatient : public Patient, public IPD 
{
private:

    int no_of_days;

public:

        // Default constructor
    IPDPatient(){}

    // Parameterized constructor
    IPDPatient(int days) 
    {
        no_of_days=days;
    }

    void get_Data() 
    {
        getPatientData();
        getIPDData();

        cout << "Enter Number of Days Admitted: ";
        cin >> no_of_days;
    }

    void display_Data() 
    {
        displayPatientData();
        displayIPDData();
        cout << "Number of Days Admitted: " << no_of_days << endl;
        cout << "Total Charges: " << (charge_per_day * no_of_days) << endl;
    }
};

int main() 
{

    IPDPatient patient;

    patient.get_Data();
    patient.display_Data();

    return 0;

}




Q-3




#include<iostream>
using namespace std;

// Design Employee Management System. 
// a)  Design appropriate classes and makeuse of inheritance. 
// b) Makeuse of constructors to initialize the members. 
// 4. Design billing system for Super Market. 
// a)  Design appropriate classes and makeuse of inheritance. 
// b) Makeuse of constructors to initializethemembers.


class Employee
{
    protected :

        int emp_id;
        string Name;
        int salary;

    public:


    Employee()
    {}
    Employee(int id,string n,int s)
    {
        emp_id=id;
        Name=n;
        salary=s;
    }
        void get_data()
        {
            cout<<"\n Enter The Employee Id : ";
            cin>>emp_id;

            cout<<"\n Enter The Employee Name : ";
            cin>>Name;

            cout<<"\n Enter The Employee Salary : ";
            cin>>salary;
        }

            void Display()
            {
                cout<<"\n Employee Id "<<emp_id;
                cout<<"\n Name : "<<Name;
                cout<<"\n Salary : "<<salary;
            }
};

class Department :public Employee
{

    protected:

        string Dep_Name;
        int T_employee;

    public :
    
        Department(){}
        Department(string Name,int employee)
        {

                Dep_Name=Name;
                T_employee=employee;

        }
       

        void Input()
        {

            Employee::get_data();

            cout<<"\n Enter Department Name : ";
            cin>>Dep_Name;

            cout<<"\n Enter The Total Employee : ";
            cin>>T_employee;
        }

            void Display()
            {

                Employee::Display();

                cout<<"\n Department Name : "<<Dep_Name;
                cout<<"\n Total Employee :"<<T_employee;
            }
};

class Date : public Department
{
    protected:
     
        int dd,mm,yyyy;

    public:

        Date()
        {}
        Date(int d,int m,int y)
        {
            dd=d;
            mm=m;
            yyyy=y;
        }

        void input()
        {

            Department ::Input();

            cout<<"\n Enter The Date (DD/MM/YYYY) : ";
            cin>>dd>>mm>>yyyy;

        }

        void display()
        {
            Department::Display();
            cout<<"(DD/MM/YYYY) : "<<dd<<"/"<<mm<<"/"<<yyyy;
        }

};


int main()
{

    int size=2;

    Date D[size];

    for(int i=0 ; i<size ; i++)
    {
        D[i].input();
        
    }

    for(int i=0 ; i<size ;i++)
    {
        D[i].display();
    }
}






Q-4






// 4. Design billing system for Super Market. 
// a)  Design appropriate classes and makeuse of inheritance. 
// b) Makeuse of constructors to initializethemembers.


#include<iostream>
using namespace std;

class Product 
{
    protected:

        string P_Name;
        float price;

    public:

        Product()
        {}
        Product(string n,float p)
        {
            P_Name=n;
            price=p;
        }

        void get_data()
        {
            cout<<"\n Enter The Product Name : ";
            cin>>P_Name;

            cout<<"\n Enter The Price : ";
            cin>>price;
        }

        void disply()
        {
            cout<<"\n"<<P_Name<<endl;
            cout<<price<<endl;
        }
};

class Discout : public Product
{
    protected:

        float discout ;

    public:

        int choice;

        Discout()
        {}
        Discout(float d)
        {
            discout=d;
        }

        void Data() 
        {
        Product::get_data();

        char choice;
        cout << "Is it a discounted product (Y/N)? ";
        cin >> choice;

        if (choice == 'Y' || choice == 'y') {
            cout << "Enter Discount Percentage: ";
            cin >> discout;

        } else 
        {
            discout = 0.0;
        }
    }

    float get_final_price() {
        return price - (price * discout / 100);
    }

    void display() {
        Product::disply();
        cout << "Discount: " << discout << "%" << endl;
        cout << "Final Price after Discount: $" << get_final_price() << endl;
    }
};


int main()
{

    int size = 2;

    Discout D[size];

        for(int i=0 ; i<size ;i++)
        {
            D[i].Data();

        }

        for(int i=0 ; i<size ;i++)

        {
            D[i].display();
        }
}